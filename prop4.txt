x=int(input("Enter the choice"))
if(x==1):
        n=int(input("Enter the size of board "))
        def isSafe(x, y, board):
            if(x >= 0 and y >= 0 and x < n and y < n and board[x][y] == -1):
                return True
            return False


        def printSolution(n, board):
            for i in range(n):
                for j in range(n):
                    print(board[i][j], end=' ')
                print()


        def solveKT(n):
            board = [[-1 for i in range(n)]for i in range(n)]
            move_x = [2, 1, -1, -2, -2, -1, 1, 2]
            move_y = [1, 2, 2, 1, -1, -2, -2, -1]
            i=int(input("Enter row number from where to start "))
            j=int(input("Enter column number from where to start "))
            board[i][j] = 0


            pos = 1
            if(not solveKTUtil(n, board, i, j, move_x, move_y, pos)):
                print("Solution does not exist")
            else:
                printSolution(n, board)


        def solveKTUtil(n, board, curr_x, curr_y, move_x, move_y, pos):

            if(pos == n**2):
                return True
            for i in range(8):
                new_x = curr_x + move_x[i]
                new_y = curr_y + move_y[i]
                if(isSafe(new_x, new_y, board)):
                    board[new_x][new_y] = pos
                    if(solveKTUtil(n, board, new_x, new_y, move_x, move_y, pos+1)):
                        return True

                    board[new_x][new_y] = -1
            return False
        solveKT(n)
elif(x==2):
    print ("Enter the number of queens")
    N = int(input())
    board = [[0]*N for _ in range(N)]

    def is_attack(i, j):
        for k in range(0,N):
            if board[i][k]==1 or board[k][j]==1:
                return True
    #checking diagonals
        for k in range(0,N):
            for l in range(0,N):
                if (k+l==i+j) or (k-l==i-j):
                    if board[k][l]==1:
                        return True
        return False

    def N_queen(n):
    #if n is 0, solution found
        if n==0:
            return True
        for i in range(0,N):
            for j in range(0,N):
                if (not(is_attack(i,j))) and (board[i][j]!=1):
                    board[i][j] = 1
                #recursion
                #wether we can put the next queen with this arrangment or not
                    if N_queen(n-1)==True:
                        return True
                    board[i][j] = 0

        return False

    N_queen(N)
    for i in board:
        print (i)

